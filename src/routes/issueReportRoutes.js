const express = require("express");
const router = express.Router();
const IssueReportController = require("../controllers/issueReportController");
const authMiddleware = require("../middlewares/authMiddleware");

/**
 * @swagger
 * /api/issue-reports:
 *   get:
 *     summary: Get user-specific issue reports
 *     security:
 *       - BearerAuth: []  # ‚úÖ ‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏ô‡∏ö Token
 *     description: |
 *       - **‡πÉ‡∏ä‡πâ API ‡∏ô‡∏µ‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏≠‡∏á‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô**
 *       - ‚úÖ **‡∏ï‡πâ‡∏≠‡∏á‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á Token**
 *     tags:
 *       - Issue each Reports
 *     parameters:
 *       - in: header
 *         name: Authorization
 *         required: true
 *         schema:
 *           type: string
 *         description: "üîí ‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏™‡πà Token ‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö `Bearer <your_token>`"
 *     responses:
 *       200:
 *         description: Return user's issue reports
 *         content:
 *           application/json:
 *             schema:
 *               type: array
 *               items:
 *                 type: object
 *                 properties:
 *                   id:
 *                     type: string
 *                     example: "1"
 *                   transaction_id:
 *                     type: string
 *                     example: "IS-01032025-0001"
 *                   username:
 *                     type: string
 *                     example: "6510742000"
 *                   description:
 *                     type: string
 *                     example: "‡∏™‡∏ö‡∏π‡πà‡∏´‡∏°‡∏î‡∏à‡πâ‡∏≤"
 *                   title:
 *                     type: string
 *                     example: "‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏´‡∏°‡∏î (‡∏ó‡∏¥‡∏ä‡∏ä‡∏π, ‡∏™‡∏ö‡∏π‡πà ‡∏Ø‡∏•‡∏Ø)"
 *                   status:
 *                     type: string
 *                     example: "‡∏£‡∏≠‡∏£‡∏±‡∏ö‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á"
 *                   building:
 *                     type: string
 *                     example: "‡∏ï‡∏∂‡∏Å‡∏≠‡∏≥‡∏ô‡∏ß‡∏¢‡∏Å‡∏≤‡∏£"
 *                   floor:
 *                     type: string
 *                     example: "1"
 *                   room:
 *                     type: string
 *                     example: "‡∏´‡πâ‡∏≠‡∏á‡∏ô‡πâ‡∏≥‡∏ä‡∏≤‡∏¢‡∏ù‡∏±‡πà‡∏á‡∏ï‡∏∞‡∏ß‡∏±‡∏ô‡∏ï‡∏Å (JC)"
 *                   created_at:
 *                     type: string
 *                     format: date-time
 *                     example: "2025-03-01T09:35:15.181Z"
 *                   updated_at:
 *                     type: string
 *                     format: date-time
 *                     example: "2025-03-01T09:35:15.181Z"
 *                   review:
 *                     type: string
 *                     format: double
 *                     example: "4.5"
 *                   comment:
 *                     type: string
 *                     format: double
 *                     example: "‡∏ó‡∏≥‡∏á‡∏≤‡∏£‡∏ß‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏°‡∏≤‡∏Å‡∏Ñ‡πà‡∏∞"
 *                   images:
 *                     type: array
 *                     description: "‡∏£‡∏ß‡∏°‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ô‡∏µ‡πâ"
 *                     items:
 *                       type: string
 *                       example: "https://s3.amazonaws.com/uploads/image1.jpg"
 *                   status_updates:
 *                     type: array
 *                     description: "‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÑ‡∏õ"
 *                     items:
 *                       type: object
 *                       properties:
 *                         status:
 *                           type: string
 *                           example: "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£"
 *                         updated_at:
 *                           type: string
 *                           format: date-time
 *                           example: "2025-03-02T18:00:00+07:00"
 *                         images:
 *                           type: array
 *                           description: "‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ô‡∏µ‡πâ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)"
 *                           items:
 *                             type: string
 *                             example: "https://s3.amazonaws.com/uploads/image2.jpg"
 *       401:
 *         description: Unauthorized (‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ Token)
 *       500:
 *         description: Internal Server Error
 */
router.get("/", authMiddleware, IssueReportController.getUserIssues);

/**
 * @swagger
 * /api/issue-reports/{id}:
 *   get:
 *     summary: Get an issue report by ID
 *     description: ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á issue report ‡∏ï‡∏≤‡∏° `id` ‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏ ‡πÇ‡∏î‡∏¢‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ Token (Bearer Authentication)
 *     tags:
 *       - Issue each Reports
 *     security:
 *       - BearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: integer
 *         description: "Issue ID ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"
 *     responses:
 *       200:
 *         description: "Success - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á Issue"
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 id:
 *                   type: string
 *                   example: "20"
 *                 transaction_id:
 *                   type: string
 *                   example: "IS-21042025-0020"
 *                 reporter_id:
 *                   type: string
 *                   example: "9"
 *                 username:
 *                   type: string
 *                   example: "6510742643"
 *                 description:
 *                   type: string
 *                   example: "Test"
 *                 title:
 *                   type: string
 *                   example: "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î"
 *                 status:
 *                   type: string
 *                   example: "Reopened"
 *                 building:
 *                   type: string
 *                   example: "‡∏ï‡∏∂‡∏Å‡∏≠‡∏≥‡∏ô‡∏ß‡∏¢‡∏Å‡∏≤‡∏£"
 *                 floor:
 *                   type: string
 *                   example: "1"
 *                 room:
 *                   type: string
 *                   example: "Coffee Shop"
 *                 assigned_to:
 *                   type: string
 *                   example: "9"
 *                 department_name:
 *                   type: string
 *                   example: "‡∏á‡∏≤‡∏ô‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏Ø"
 *                 created_at:
 *                   type: string
 *                   format: date-time
 *                   example: "2025-04-21T07:14:42.389Z"
 *                 updated_at:
 *                   type: string
 *                   format: date-time
 *                   example: "2025-04-21T16:09:49.116Z"
 *                 review:
 *                   type: number
 *                   format: double
 *                   nullable: true
 *                   example: null
 *                 comment:
 *                   type: string
 *                   nullable: true
 *                   example: null
 *                 closed:
 *                   type: boolean
 *                   example: false
 *                 status_updates:
 *                   type: array
 *                   items:
 *                     type: object
 *                     properties:
 *                       images:
 *                         type: array
 *                         items:
 *                           type: string
 *                           example: "https://fongdi.s3.ap-southeast-2.amazonaws.com/uploads/1745219677146-370076038.jpg"
 *                       status:
 *                         type: string
 *                         example: "‡∏£‡∏≠‡∏£‡∏±‡∏ö‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á"
 *                       updated_at:
 *                         type: string
 *                         format: date-time
 *                         example: "2025-04-21T07:14:42.389337+00:00"
 *                       updated_by:
 *                         type: string
 *                         example: "‡∏≠‡∏ä‡∏¥‡∏£‡∏ç‡∏≤ ‡∏û‡πà‡∏≠‡∏Ñ‡πâ‡∏≤"
 *                       description:
 *                         type: string
 *                         example: "Test"
 *       400:
 *         description: "Bad Request - ID ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á"
 *       401:
 *         description: "Unauthorized - ‡πÑ‡∏°‡πà‡∏°‡∏µ Token ‡∏´‡∏£‡∏∑‡∏≠ Token ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á"
 *       403:
 *         description: "Forbidden - ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á Issue ‡∏ô‡∏µ‡πâ"
 *       404:
 *         description: "Not Found - ‡πÑ‡∏°‡πà‡∏û‡∏ö Issue ‡∏ô‡∏µ‡πâ"
 *       500:
 *         description: "Internal Server Error - ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå"
 */
router.get("/:id", authMiddleware, IssueReportController.getIssueById);

/**
 * @swagger
 * /api/issue-reports:
 *   post:
 *     summary: Report an issue
 *     security:
 *       - BearerAuth: []  # ‚úÖ ‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏ô‡∏ö Token ‡πÉ‡∏ô Header
 *     description: |
 *       - **‡πÉ‡∏ä‡πâ API ‡∏ô‡∏µ‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏à‡πâ‡∏á‡∏õ‡∏±‡∏ç‡∏´‡∏≤**
 *       - **‡∏ï‡πâ‡∏≠‡∏á‡∏™‡πà‡∏á `problem_id`, `description`, `location_id`**
 *       - **`transaction_id` ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö `IS-DDMMYYYY-XXXX`**
 *       - ‚úÖ **‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ï‡πâ‡∏≠‡∏á‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏Å‡πà‡∏≠‡∏ô ‡πÅ‡∏•‡∏∞‡πÅ‡∏ô‡∏ö Token ‡πÉ‡∏ô Header**
 *       - ‚úÖ **‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á Request Body**
 *         ```json
 *         {
 *           "problem_id": 2,
 *           "description": "‡πÑ‡∏ü‡∏î‡∏±‡∏ö‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà‡πÄ‡∏ä‡πâ‡∏≤",
 *           "location_id": 1
 *         }
 *         ```
 *     tags:
 *       - Issue each Reports
 *     parameters:
 *       - in: header
 *         name: Authorization
 *         required: true
 *         schema:
 *           type: string
 *         description: "üîí ‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏™‡πà Token ‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö `Bearer <your_token>`"
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               problem_id:
 *                 type: integer
 *                 example: 2
 *               description:
 *                 type: string
 *                 example: "‡πÑ‡∏ü‡∏î‡∏±‡∏ö‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà‡πÄ‡∏ä‡πâ‡∏≤"
 *               location_id:
 *                 type: integer
 *                 example: 1
 *     responses:
 *       201:
 *         description: Issue reported successfully.
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 message:
 *                   type: string
 *                   example: "Issue reported successfully"
 *                 report:
 *                   type: object
 *                   properties:
 *                     id:
 *                       type: integer
 *                       example: 123
 *                     transaction_id:
 *                       type: string
 *                       example: "IS-23022025-0123"
 *                     reporter_id:
 *                       type: integer
 *                       example: 5
 *                     problem_id:
 *                       type: integer
 *                       example: 2
 *                     description:
 *                       type: string
 *                       example: "‡πÑ‡∏ü‡∏î‡∏±‡∏ö‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà‡πÄ‡∏ä‡πâ‡∏≤"
 *                     status:
 *                       type: string
 *                       example: "Pending"
 *                     location_id:
 *                       type: integer
 *                       example: 1
 *                     created_at:
 *                       type: string
 *                       format: date-time
 *                       example: "2025-02-23T12:34:56.789Z"
 *       401:
 *         description: Unauthorized (‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ Token)
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 error:
 *                   type: string
 *                   example: "Unauthorized"
 *                 message:
 *                   type: string
 *                   example: "You must log in before reporting an issue."
 *                 solution:
 *                   type: string
 *                   example: "Please log in and include a valid Bearer token in the Authorization header."
 *       400:
 *         description: Missing required parameters
 *       500:
 *         description: Internal Server Error
 */
router.post("/", authMiddleware, IssueReportController.createIssueReport);



module.exports = router;
